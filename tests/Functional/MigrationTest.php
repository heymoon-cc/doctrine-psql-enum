<?php

namespace HeyMoon\DoctrinePostgresEnum\Tests\Functional;

use HeyMoon\DoctrinePostgresEnum\Tests\Fixtures\Kernel;
use PHPUnit\Framework\TestCase;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Exception\ExceptionInterface;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;

class MigrationTest extends TestCase
{
    private static Kernel $kernel;

    public function setUp(): void
    {
        self::$kernel = new Kernel('prod', false);
    }

    public function tearDown(): void
    {
        self::$kernel->shutdown();
    }

    /**
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Platform\DoctrineEnumColumnPlatform::processColumn
     * @covers \HeyMoon\DoctrinePostgresEnum\Attribute\EnumType::__construct
     * @covers \HeyMoon\DoctrinePostgresEnum\Attribute\EnumType::getName
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Driver\Driver::__construct
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Driver\Driver::getDatabasePlatform
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Middleware\DoctrineEnumColumnMiddleware::__construct
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Middleware\DoctrineEnumColumnMiddleware::wrap
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Platform\DoctrineEnumColumnPlatform::__construct
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Platform\DoctrineEnumColumnPlatform::_getCreateTableSQL
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Platform\DoctrineEnumColumnPlatform::createSchemaManager
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Provider\MetaDataProvider::__construct
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Provider\MetaDataProvider::getEnumClass
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Provider\MetaDataProvider::getRange
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Provider\MetaDataProvider::getRawType
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Provider\MetaDataProvider::getTable
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Provider\MetaDataProvider::getTables
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Platform\DoctrineEnumColumnPlatform::getAlterTableSQL
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Schema\DoctrineEnumColumnSchemaManager::__construct
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Schema\DoctrineEnumColumnSchemaManager::_getPortableTableDefinition
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Schema\DoctrineEnumColumnSchemaManager::_getPortableTableColumnDefinition
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Type\EnumType::getDefaultName
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Type\EnumType::getReflection
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Type\EnumType::getSQLDeclaration
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Type\EnumType::nameFromClass
     * @covers \HeyMoon\DoctrinePostgresEnum\DependencyInjection\Configuration::getConfigTreeBuilder
     * @covers \HeyMoon\DoctrinePostgresEnum\DependencyInjection\DoctrinePostgresEnumExtension::checkMigrationsAvailability
     * @covers \HeyMoon\DoctrinePostgresEnum\DependencyInjection\DoctrinePostgresEnumExtension::getConfiguration
     * @covers \HeyMoon\DoctrinePostgresEnum\DependencyInjection\DoctrinePostgresEnumExtension::load
     * @covers \HeyMoon\DoctrinePostgresEnum\DependencyInjection\DoctrinePostgresEnumExtension::prepend
     * @covers \HeyMoon\DoctrinePostgresEnum\DoctrinePostgresEnumBundle::getContainerExtension
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Type\EnumType::setCommentTag
     * @covers \HeyMoon\DoctrinePostgresEnum\Doctrine\Type\EnumType::setDefaultName
     * @return void
     * @throws ExceptionInterface
     */
    public function testUpdateSchema()
    {
        self::$kernel->boot();
        $doctrine = self::$kernel->getContainer()->get('doctrine');
        $connection = $doctrine->getConnection();
        $connection->executeQuery('DROP TABLE IF EXISTS HasEnumEntity');
        $connection->executeQuery('DROP TYPE IF EXISTS example CASCADE');
        $connection->executeQuery('DROP TYPE IF EXISTS another_example CASCADE');
        $connection->executeQuery("CREATE TYPE another_example AS ENUM('foo')");
        $application = new Application(self::$kernel);
        $command = $application->get('doctrine:schema:update');
        $output = new BufferedOutput();
        $command->run(new ArrayInput(['--dump-sql' => true]), $output);

        $expected = [
            "CREATE TYPE example AS ENUM ('test','case');",
            "ALTER TYPE another_example ADD VALUE 'bar';",
            "CREATE TABLE HasEnumEntity (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, status example NOT NULL, another another_example NOT NULL, PRIMARY KEY(id));",
        ];

        $sql = explode(PHP_EOL, $output->fetch());
        array_pop($sql);
        $this->assertEquals($expected, $sql);
        // Testing case insensetivity in table names on update
        // PostgreSQL supports case-sensitive names with quoutes
        // Yet, conflicting names in different cases is probably
        // a poor design choice
        foreach ($sql as $row) {
            $connection->executeQuery($row);
        }
        $connection->executeQuery('ALTER TABLE HasEnumEntity DROP COLUMN another');
        $command = $application->get('doctrine:schema:update');
        $command->run(new ArrayInput(['--dump-sql' => true]), $output);
        $sql = explode(PHP_EOL, $output->fetch());
        array_pop($sql);
        $this->assertEquals('ALTER TABLE hasenumentity ADD another another_example NOT NULL;', array_pop($sql));
        // Test dropping column
        $connection->executeQuery('ALTER TABLE HasEnumEntity ADD unexisting example');
        $command = $application->get('doctrine:schema:update');
        $command->run(new ArrayInput(['--dump-sql' => true]), $output);
        $sql = explode(PHP_EOL, $output->fetch());
        array_pop($sql);
        $this->assertEquals('ALTER TABLE hasenumentity DROP unexisting;', array_pop($sql));
    }
}
